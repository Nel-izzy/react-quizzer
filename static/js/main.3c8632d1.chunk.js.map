{"version":3,"sources":["components/Question.js","components/QuestionCount.js","components/Spinner.js","components/Select.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","questions","content","correct_answer","question","answers","style","marginLeft","dangerouslySetInnerHTML","__html","map","answer","bgColor","showAnswers","key","className","onClick","handleAnswer","QuestionCount","counter","total","spinner","Select","onSubmit","handleSubmit","value","category","onChange","handleChange","App","state","currentIndex","score","error","quizEnded","bind","handleNext","this","fetch","then","res","json","data","results","incorrect_answers","sort","Math","random","setState","fetchQuestions","length","e","target","preventDefault","undefined","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3c8632d1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../style/Question.css\";\r\n\r\nfunction Question(props) {\r\n  const questions = props.content;\r\n  const { correct_answer, question, answers } = questions;\r\n  // const shuffledAnswers = [correct_answer, ...incorrect_answers].sort(\r\n  //   () => Math.random() - 0.5\r\n  // );\r\n  return (\r\n    <div>\r\n      <h2\r\n        style={{ marginLeft: \"2rem\" }}\r\n        dangerouslySetInnerHTML={{ __html: question }}\r\n      />\r\n      <div>\r\n        {answers.map((answer) => {\r\n          const bgColor = props.showAnswers\r\n            ? answer === correct_answer\r\n              ? \"correct\"\r\n              : \"wrong\"\r\n            : \" \";\r\n          return (\r\n            <button\r\n              key={answer}\r\n              className={bgColor}\r\n              onClick={() => props.handleAnswer(answer)}\r\n              dangerouslySetInnerHTML={{ __html: answer }}\r\n            ></button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nQuestion.propTypes = {\r\n  content: PropTypes.object.isRequired,\r\n  handleAnswer: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Question;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction QuestionCount(props) {\r\n  return (\r\n    <div className=\"questionCount\">\r\n      Question <span>{props.counter}</span> of <span> {props.total}</span>\r\n    </div>\r\n  );\r\n}\r\nQuestionCount.propTypes = {\r\n  counter: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n};\r\nexport default QuestionCount;\r\n","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nconst spinner = ()=>(\r\n    <div className=\"loader\">Loading...</div>\r\n)\r\n\r\nexport default spinner\r\n\r\n\r\n","import React from \"react\";\r\n\r\nexport default function Select(props) {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <select value={props.category} onChange={props.handleChange}>\r\n        <option value=\"9\">General Knowledge</option>\r\n        <option value=\"10\">Entertainment: Books</option>\r\n        <option value=\"11\">Entertainment: Movies</option>\r\n        <option value=\"12\">Entertainment: Musicals & Theatres</option>\r\n        <option value=\"13\">Entertainment: Television</option>\r\n        <option value=\"14\">Entertainment: Video Games</option>\r\n        <option value=\"15\">Entertainment: Board Games</option>\r\n        <option value=\"16\">Science & Nature </option>\r\n        <option value=\"17\">Entertainment: Books</option>\r\n        <option value=\"18\">Science: Computers</option>\r\n        <option value=\"19\">Science: Mathematics</option>\r\n        <option value=\"30\">Science: Gadgets</option>\r\n        <option value=\"20\">Mythology</option>\r\n        <option value=\"21\">Sports</option>\r\n        <option value=\"22\">Geography</option>\r\n        <option value=\"23\">History</option>\r\n        <option value=\"24\">Politics</option>\r\n        <option value=\"25\">Art</option>\r\n        <option value=\"26\">Celebrities</option>\r\n        <option value=\"27\">Animals</option>\r\n        <option value=\"28\">Vehicles</option>\r\n      </select>\r\n      <button>Fetch Questions</button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Question from \"./components/Question\";\r\nimport QuestionCount from \"./components/QuestionCount\";\r\nimport Spinner from \"./components/Spinner\";\r\nimport Select from \"./components/Select\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions: [],\r\n      currentIndex: 0,\r\n      score: 0,\r\n      counter: 1,\r\n      error: \"\",\r\n      quizEnded: false,\r\n      showAnswers: false,\r\n      category: 9,\r\n    };\r\n    this.handleAnswer = this.handleAnswer.bind(this);\r\n    this.handleNext = this.handleNext.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  fetchQuestions() {\r\n    const { category } = this.state;\r\n    try {\r\n      fetch(\r\n        `https://opentdb.com/api.php?amount=10&&category=${category}&&type=multiple`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          const questions = data.results.map((question) => ({\r\n            ...question,\r\n            answers: [\r\n              question.correct_answer,\r\n              ...question.incorrect_answers,\r\n            ].sort(() => Math.random() - 0.5),\r\n          }));\r\n          this.setState({\r\n            questions,\r\n          });\r\n        });\r\n    } catch (error) {\r\n      this.setState({ error });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchQuestions();\r\n  }\r\n  handleAnswer(answer) {\r\n    const { questions, currentIndex, showAnswers } = this.state;\r\n    if (!showAnswers) {\r\n      if (answer === questions[currentIndex].correct_answer) {\r\n        this.setState({ score: this.state.score + 1 });\r\n      }\r\n    }\r\n\r\n    this.setState({ showAnswers: true });\r\n  }\r\n  handleNext() {\r\n    const { counter, currentIndex, questions } = this.state;\r\n    this.setState({\r\n      currentIndex: currentIndex + 1,\r\n      counter: counter + 1,\r\n      showAnswers: false,\r\n    });\r\n    currentIndex >= questions.length - 1 && this.setState({ quizEnded: true });\r\n  }\r\n  handleChange(e) {\r\n    this.setState({ category: e.target.value });\r\n  }\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (this.state.category !== undefined) {\r\n      this.setState({\r\n        category: e.target.value,\r\n        counter: 1,\r\n        currentIndex: 0,\r\n        score: 0,\r\n        questions: [],\r\n        showAnswers: false,\r\n      });\r\n      this.fetchQuestions();\r\n    }\r\n  }\r\n  render() {\r\n    const {\r\n      questions,\r\n      currentIndex,\r\n      quizEnded,\r\n      score,\r\n      showAnswers,\r\n      counter,\r\n      category,\r\n    } = this.state;\r\n    return quizEnded ? (\r\n      <h2 className=\"result\">\r\n        You scored {score} out of {questions.length}\r\n      </h2>\r\n    ) : (\r\n      <div className=\"question\">\r\n        <Select\r\n          handleChange={this.handleChange}\r\n          category={category}\r\n          handleSubmit={this.handleSubmit}\r\n        />\r\n        {this.state.questions.length < 1 ? (\r\n          <div>\r\n            <Spinner />\r\n            <h2>Fetching questions... Please wait</h2>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <QuestionCount counter={counter} total={questions.length} />\r\n            <Question\r\n              content={questions[currentIndex]}\r\n              handleAnswer={this.handleAnswer}\r\n              showAnswers={showAnswers}\r\n            />\r\n            {showAnswers && (\r\n              <div>\r\n                <button className=\"next-button\" onClick={this.handleNext}>\r\n                  {counter === questions.length ? \"Finish\" : \"Next Question\"}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}